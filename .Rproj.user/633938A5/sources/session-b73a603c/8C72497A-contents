---
title: "Análisis de Datos - Estudio COLELAP"
author: "Percy Soto-Becerra"
format: 
  html: 
    embed-resources: true
    code-fold: true
    code-summary: "Mostrar código"
    toc: true
execute:
  warning: false
  message: false
editor: source
---

## Configuración incial

```{r}
rm(list = ls())

if (!require("pacman")) install.packages("pacman")

pacman::p_unload("all")

pacman::p_install_gh("psotob91/psbmisc")
pacman::p_install_gh("smin95/smplot2")

pacman::p_load(tidyverse, 
               rio, 
               here, 
               labelled, 
               summarytools, 
               janitor,
               DT, 
               Hmisc, 
               rms, 
               knitr, 
               htmltools, 
               devtools, 
               gt, 
               gtsummary, 
               flextable,
               psbmisc,
               gghalves, 
               cowplot, 
               smplot2, 
               ggsci,
               splines, 
               lqmm,
               logistf, 
               # quantregGrowth, 
               # quantreg, 
               broom, 
               broom.mixed, 
               parameters, 
               modelbased, 
               ggeffects)

# Set Spanish theme for gtsummary tables
set_gtsummary_theme(my_theme_spa)
```

## Importar datos

::: {.panel-tabset}

### Índice

- **Datos formato longitudinal:** Para desenlace primario nivel de dolor.

- **Datos formato transversal:** Para desenlace secundario: Uso de refuerzo analgésico.

### Datos formato longitudinal

```{r}
#| column: page
datos_long <- import(here("Data/Tidy/data_long.rds")) 
datatable(datos_long)
```

### Datos en formato transversal

```{r}
#| column: page
datos_wide <- import(here("Data/Tidy/data_wide.rds")) 
datatable(datos_wide)
```

:::


## Tabla 1

```{r}
datos_long %>% 
  filter(t == 0) %>% 
  select(edad, edad_cat, sexo, peso, talla, imc, imc_cat, lav_perit) %>% 
  tbl_summary() -> tabla1

# show_header_names(tabla1)

# Convertir a tabla de flextable
tabla1fx <- tabla1 |> 
  as_flex_table()

# Aplica un tema estilo zebra (filas alternas en colores diferentes)
tabla1fx <- theme_zebra(tabla1fx)

# Cambia el color de fondo del encabezado
tabla1fx <- bg(tabla1fx, bg = "#D3D3D3", part = "header")

# Agrega el título a la tabla
tabla1fx <- set_caption(tabla1fx, caption = "Tabla 1. Características de la muestra")
# Configura la tabla para la exportación a Word
tabla1fx <- set_table_properties(tabla1fx, width = .75, layout = "autofit")

tabla1fx |> 
  save_as_docx(path = here("Tables", "Tabla1.docx"))

tabla1
```

## Tabla 2

```{r}
datos_long %>% 
  filter(t == 0) %>% 
  select(edad, edad_cat, sexo, peso, talla, imc, imc_cat, lav_perit) %>% 
  tbl_summary(by = lav_perit) %>% 
  bold_labels() %>%
  add_p(
    test = list(
      edad ~ "t.test",
      peso ~ "t.test",
      talla ~ "t.test",
      imc ~ "wilcox.test"
      )
    ) %>%
  separate_p_footnotes() %>%
  modify_footnote(everything() ~ NA) -> tabla2

# Convertir a tabla de flextable
tabla2fx <- tabla2 |> 
  as_flex_table()

# Aplica un tema estilo zebra (filas alternas en colores diferentes)
tabla2fx <- theme_zebra(tabla2fx)

# Cambia el color de fondo del encabezado
tabla2fx <- bg(tabla2fx, bg = "#D3D3D3", part = "header")

# Agrega el título a la tabla
tabla2fx <- set_caption(tabla2fx, caption = "Tabla 2. Características de la muestra en el basal según intervención recibida")
# Configura la tabla para la exportación a Word
tabla2fx <- set_table_properties(tabla2fx, width = .75, layout = "autofit")

tabla2fx |> 
  save_as_docx(path = here("Tables", "Tabla2.docx"))

# show_header_names(tabla2)

tabla2
```

## Tabla Anexo

```{r}
datos_wide %>% 
  select(starts_with("eva"), starts_with("dol"), ref_analg, lav_perit) %>% 
  select(-eva_0, -dol_0) %>% 
  tbl_summary(by = lav_perit, 
              type = c(eva_6, eva_12, eva_24) ~ "continuous2") %>% 
  add_overall() %>% 
  bold_labels() %>% 
  add_p() %>%
  separate_p_footnotes() %>%
  modify_footnote(everything() ~ NA) %>% 
  modify_header(stat_0 ~ "**Total** \n **(n={N})**") -> tabla1_anexo

# Convertir a tabla de flextable
tabla1_anexo_fx <- tabla1_anexo |> 
  as_flex_table()

# Aplica un tema estilo zebra (filas alternas en colores diferentes)
tabla1_anexo_fx <- theme_zebra(tabla1_anexo_fx)

# Cambia el color de fondo del encabezado
tabla1_anexo_fx <- bg(tabla1_anexo_fx, bg = "#D3D3D3", part = "header")

# Agrega el título a la tabla
tabla1_anexo_fx <- set_caption(tabla1_anexo_fx, caption = "Tabla 2. Características de la muestra en el basal según intervención recibida")

# Configura la tabla para la exportación a Word
tabla1_anexo_fx <- set_table_properties(tabla1_anexo_fx, width = .75, layout = "autofit")

tabla1_anexo_fx |> 
  save_as_docx(path = here("Tables", "Tabla1_anexo.docx"))

tabla1_anexo
```

## Figura 1

```{r}
datos_long %>% 
  filter(t != 0) %>%
  mutate(tf = droplevels(tf)) %>%
  group_by(tf, lav_perit) %>% 
  mutate(med_eva = median(eva, na.rm = TRUE)) %>% 
  ungroup() %>% 
  ggplot(aes(x = tf, 
             y = eva, 
             color = lav_perit, 
             shape = lav_perit, 
             group = lav_perit)) + 
  geom_point(aes(x = tf, 
                y = med_eva, 
                group = lav_perit,
                shape = lav_perit,
                color = lav_perit), 
            alpha = 1,
            size = 4) + 
  geom_line(aes(x = tf, 
                y = med_eva, 
                group = lav_perit, 
                color = lav_perit), 
            alpha = 1, 
            size = 1) + 
  sm_slope(labels = c('6 h','12 h', '24 h'), 
           group = id,
           point.params = list(alpha = 0.1),
           line.params = list(alpha = 0.1),
           legends = TRUE,
           show_mean = FALSE,
           many_groups = FALSE, 
           position = position_dodge(width = 0.15)) + 
  scale_color_manual(values = sm_color('blue','orange')) +
  scale_shape_manual(values = c(16, 17)) +
  scale_y_continuous(breaks = seq(0, 10, 1), limits = c(0, 10)) + 
  theme(legend.position = c(0.2, 0.1),
        legend.title = element_blank(),
        legend.text = element_text(size = 10)) + 
  labs(y = "Escala Visual Analógica \n (Puntaje: 0-10)") -> eva_spag_plot

ggsave(filename = "eva_spag_plot.png", 
       plot = eva_spag_plot, 
       device = "png", 
       path = here("Fig"), 
       scale = 2, 
       width = 12, 
       height = 9, 
       units = "cm", 
       dpi = 900)

knitr::include_graphics(here("Fig/eva_spag_plot.png"))
```

## Tabla 3

### Modelos

```{r}
# Numero de repeticiones bootstrap
B <- 1000

# Centrar variables para análisis
datos2 <- datos_long %>% 
  filter(t != 0) |> 
  mutate(edadc = edad - mean(edad), 
         imcc = imc - mean(imc), 
         tallac = talla - mean(talla))
```


```{r}
# Modelo crudo

mod0 <- lqmm(fixed = eva ~ tf * lav_perit, 
             random = ~ 1, 
             group = id, 
             tau = 0.5, 
             data = datos2)

mod0$control$LP_tol_ll <- 1e-3
mod0$control$LP_max_iter <- 1000

dif.est <- emmeans::emmeans(mod0, 
                 pairwise ~ lav_perit|tf, 
                 weights = "prop", 
                 adjust = "fdr", 
                 tau = 0.5, 
                 B = B, 
                 seed = 2014)

tab_est_median <- model_parameters(dif.est) |> 
  slice_head(n = 6) |> 
  mutate(tto = rep(c("no_lav", "si_lav"), 3), 
         tf = factor(rep(c("6", "12", "24"), each = 2))) |> 
  pivot_wider(id_cols = tf, 
              names_from = tto, 
              values_from = Coefficient)

tab_est_dif <- model_parameters(dif.est) |> 
  slice_tail(n = 3) |>   
  mutate(tf = factor(c("6", "12", "24"))) |> 
  select(tf, p)

tab_ci_dif <- model_parameters(confint(dif.est)$contrasts) |> 
  select(tf, Coefficient, CI_high, CI_low) |> 
  mutate(Coefficient = -1 * Coefficient, 
         CI_high = -1 * CI_high, 
         CI_low = -1 * CI_low)

tab_mod0 <- tab_est_median |> 
  left_join(tab_ci_dif, by = "tf") |> 
  left_join(tab_est_dif, by = "tf") |> 
  rename(coef0 = Coefficient, 
         ll0 = CI_high, 
         ul0 = CI_low, 
         p0 = p)

# Modelo ajustado
mod1 <- lqmm(fixed = eva ~ tf * lav_perit + 
               bs(edadc, 3) + 
               sexo + 
               bs(imcc, 3) + 
               bs(tallac, 3), 
             random = ~ 1, 
             group = id, 
             tau = 0.5, 
             data = datos2)

mod1$control$LP_tol_ll <- 1e-3
mod1$control$LP_max_iter <- 1000

dif.est <- emmeans::emmeans(mod1, 
                 pairwise ~ lav_perit|tf, 
                 weights = "prop", 
                 adjust = "fdr", 
                 tau = 0.5, 
                 B = B, 
                 seed = 2014)

tab_est_median_plot <- model_parameters(dif.est) |> 
  slice_head(n = 6)

tab_est_dif <- model_parameters(dif.est) |> 
  slice_tail(n = 3) |>   
  mutate(tf = factor(c("6", "12", "24"))) |> 
  select(tf, p)

tab_ci_dif <- model_parameters(confint(dif.est)$contrasts) |> 
  select(tf, Coefficient, CI_high, CI_low) |> 
  mutate(Coefficient = -1 * Coefficient, 
         CI_high = -1 * CI_high, 
         CI_low = -1 * CI_low)

tab_mod1 <- tab_ci_dif |> 
  left_join(tab_est_dif, by = "tf") |> 
  rename(coef1 = Coefficient, 
         ll1 = CI_high, 
         ul1 = CI_low, 
         p1 = p)
```

### Tablas

```{r}
# Tabla de reporte
tab_mod0 |> 
  left_join(tab_mod1, by = "tf") |> 
  mutate_at(vars(p0, p1), ~round(., 3)) |> 
  mutate_at(vars(p0, p1), ~if_else(. == 0, 
                                   "<0.001", 
                                   as.character(.))) |> 
  mutate_if(is.numeric, round, 1) -> tab_mod_final

tab_mod_final |> 
  mutate(est0 = str_glue("{coef0} ({ll0} a {ul0}), {p0}"), 
         est1 = str_glue("{coef1} ({ll1} a {ul1}), {p1}")) |> 
  select(tf, no_lav, si_lav, est0, est1) -> tab_mod_final_est

# Tabla de flextable

## Primero, renombra las columnas de tu data.frame
names(tab_mod_final_est) <- c("Tiempo", "Sin lavado peritoneal (Mediana)", 
                              "Con lavado peritoneal (Mediana)", 
                              "Modelo crudo¹ \n Dif. Medianas (IC95%), p", 
                              "Modelo ajustado² \n Dif. Medianas (IC95%)")

## Crea la tabla flextable
ft <- flextable(tab_mod_final_est)

## Aplica un tema estilo zebra (filas alternas en colores diferentes)
ft <- theme_zebra(ft)

## Cambia el color de fondo del encabezado
ft <- bg(ft, bg = "#D3D3D3", part = "header")

# Añade notas al pie de página
ft <- add_footer_lines(ft, "¹ Ajustado por potenciales variables confusoras: sexo, edad, índice de masa corporal y talla.")
ft <- add_footer_lines(ft, "Med. = medianas, Dif. Med. = Diferencia de medianas, IC95% = intervalo de confianza al 95%")

ft <- add_footer_lines(ft, "¹ Ajustado por potenciales variables confusoras: sexo, edad, índice de masa corporal y talla.")

ft <- add_footer_lines(ft, "² Modelos multinivel con efectos aleatorios. Se consideró al paciente como intercepto aleatorio.")

## Configura la tabla para la exportación a Word
ft <- set_table_properties(ft, width = .75, layout = "autofit")

## Para guardar la tabla en un archivo de Word
ft |> 
  save_as_docx(path = here("Tables", "Tabla3.docx"))

## Visualiza la tabla en R
ft
```



```{r}
# icc <- 0.9864 ^ 2 / (0.9864 + 0.9632^2)
# icc
```

### Gráfico

```{r}
tab_est_median_plot |> 
  mutate(tf = factor(rep(c("6", "12", "24"), each = 2), 
                     level = c("6", "12", "24")), 
         tto = rep(c("Sin lavado peritoneal", 
                     "Con lavado peritoneal"), 3)) |> 
  rename(coef = Coefficient, 
         ll = CI_low, 
         ul = CI_high) |> 
  select(tf, tto, coef, ll, ul, p) |> 
  as_tibble() -> tab_plot

# tab_plot
```

```{r}
# Crea el gráfico
ggplot(tab_plot, 
       aes(x = as.numeric(tf), 
           y = coef, 
           group = tto, 
           color = tto)) +
  geom_point(size = 3) +
  geom_linerange(aes(ymin = ll, ymax = ul), size = 0.5) +
  geom_segment(aes(xend = as.numeric(tf), 
                   y = ll, yend = ll), size = 0.5) +
  geom_segment(aes(xend = as.numeric(tf), y = ul, yend = ul),
               size = 0.5) +
  geom_line() +
  scale_color_lancet() +
  scale_x_continuous(breaks = c(1, 2, 3), 
                     labels = c("6", "12", "24")) +
  labs(x = "Tiempo desde intervención (horas)", 
       y = "Mediana ajustada de dolor \n (EVA: 0-10)", 
       color = "Tratamiento") +
  theme_classic() +
  theme(legend.position = "bottom") -> plot_error

plot_error
```

```{r}
ggsave(filename = "Figura2_Efectos_EVA.png", 
       plot = plot_error, 
       device = "png", 
       path = here("Fig"), 
       scale = 2, 
       width = 12,
       height = 6, 
       units = "cm", 
       dpi = 900
       )
```

### Tabla 4


```{r}
datos2 <- datos_wide |> 
  mutate(edadc = edad - mean(edad), 
         imcc = imc - mean(imc), 
         tallac = talla - mean(talla))
```

```{r}
mod0 <- logistf(ref_analg ~ lav_perit,  
                data = datos2)

summary(mod0)
```


```{r}
mod1 <- logistf(ref_analg ~ lav_perit + 
                  bs(edadc, 3) + 
                  sexo + 
                  bs(imcc, 3) + 
                  bs(tallac, 3), 
                plcontrol = logistpl.control(maxit = 1000), 
                data = datos2)

summary(mod1)
```


```{r}
mod0 |> 
  tbl_regression(include = lav_perit, 
                 exponentiate = TRUE) |> 
  modify_header(estimate = "**OR**", 
                      ci = "**IC95%**")  %>%
  modify_footnote(everything() ~ NA, abbreviation = TRUE) -> tab_mod0
```


```{r}
mod1 |> 
  tbl_regression(include = lav_perit, 
                 exponentiate = TRUE) |> 
  modify_header(estimate = "**OR**", 
                      ci = "**IC95%**")  %>%
  modify_footnote(everything() ~ NA, abbreviation = TRUE) -> tab_mod1

tbl_merge(list(tab_mod0, tab_mod1), 
          tab_spanner = c("**Modelo crudo**", "**Modelo ajustado¹**")) -> tab_mod_final

ft <- tab_mod_final |> as_flex_table()

## Aplica un tema estilo zebra (filas alternas en colores diferentes)
ft <- theme_zebra(ft)

## Cambia el color de fondo del encabezado
ft <- bg(ft, bg = "#D3D3D3", part = "header")

# Añade notas al pie de página
ft <- add_footer_lines(ft, "¹ Ajustado por potenciales variables confusoras: sexo, edad, índice de masa corporal y talla.")

## Configura la tabla para la exportación a Word
ft <- set_table_properties(ft, width = .75, layout = "autofit")

## Para guardar la tabla en un archivo de Word
ft |> 
  save_as_docx(path = here("Tables", "Tabla4.docx"))

tab_mod_final
```

## Ticket de Reproducibilidad

```{r}
sessionInfo()
```
